// File generated by CPPExt (Transient)
//
//
//                     Copyright (C) 1991 - 2000 by
//                      Matra Datavision SA.  All rights reserved.
//
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
//
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _McCadCSGGeom_Surface_HeaderFile
#define _McCadCSGGeom_Surface_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Handle_McCadCSGGeom_Surface_HeaderFile
#include <Handle_McCadCSGGeom_Surface.hxx>
#endif

#ifndef _gp_Ax3_HeaderFile
#include <gp_Ax3.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _McCadCSGGeom_SurfaceType_HeaderFile
#include <McCadCSGGeom_SurfaceType.hxx>
#endif
#ifndef _gp_Trsf_HeaderFile
#include <gp_Trsf.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_OStream_HeaderFile
#include <Standard_OStream.hxx>
#endif
#ifndef _Handle_Geom_Surface_HeaderFile
#include <Handle_Geom_Surface.hxx>
#endif
#include <McCadCSGGeom_Unit.hxx>
#include <McCadCSGGeom_MCType.hxx>
#include <TColStd_HSequenceOfInteger.hxx>

class gp_Trsf;
class gp_Pnt;
class gp_Ax3;
class GeomAdaptor_Surface;
class Geom_Surface;

//! \brief Base class for all McCad surfaces


//! This class is inherited by all surface classes in McCadCSGGeom. <br>
//! Functions are commented only here, not in its children.
class McCadCSGGeom_Surface : public MMgt_TShared {

public:
 // Methods PUBLIC
 //

//! Returns true if the surface (not for planes) has a transformation
Standard_EXPORT virtual  Standard_Boolean HaveTransformation() const;

//! Set the transformation number which will be given in the MC (MCNP) output. <br>
//! In MCNP a surface can have a transformation number. The number is linked to <br>
//! a transformation matrix in the data section. Set the transformation number here.
Standard_EXPORT virtual  void SetTrsfNumber(const Standard_Integer theTNumber) ;

//! Receive transformation number. See SetTrsfNumber()
Standard_EXPORT virtual  Standard_Integer GetTrsfNumber() const;

//! Set the transformation for this surface. See SetTrsfNumber()
Standard_EXPORT virtual  void SetTrsf(const gp_Trsf& theTrsf) ;

//! Returns the Transformation for this surface
Standard_EXPORT virtual  gp_Trsf GetTrsf() const;

//! Define the location of the surface
Standard_EXPORT virtual  void SetLocation(const gp_Pnt& Loc) ;

//! Returns the location of the surface
Standard_EXPORT virtual  gp_Pnt GetLocation() const;

//! get the transformation mat. <br>
Standard_EXPORT virtual  gp_Ax3 GetAxis() const;

//! set the transformation mat. <br>
Standard_EXPORT virtual  void SetAxis(const gp_Ax3& theAx) ;

//! Returns the type of Surface (McCadCSGGeom_Plane, ...)
Standard_EXPORT virtual  McCadCSGGeom_SurfaceType GetType() const;

//! Set the Surface type
Standard_EXPORT virtual  void SetType(const McCadCSGGeom_SurfaceType theType) ;

//! Get surface number <br>
//! Each surface has it's own unique ID in MC codes.
Standard_EXPORT virtual  Standard_Integer GetNumber() const;

//! Set unique Surface ID for MC code
Standard_EXPORT virtual  void SetNumber(const Standard_Integer theNumber) ;

//! Performs Point evaluation <br>
Standard_EXPORT virtual  Standard_Real Evaluate(const gp_Pnt& thePoint) const = 0;

//! findes a point on the surface; <br>
Standard_EXPORT virtual  gp_Pnt Value(const Standard_Real U,const Standard_Real V) const = 0;

//! Print the surface description for the chosen MC type <br>
//! See SetMCType()
Standard_EXPORT virtual  void Print(Standard_OStream& theStream) const = 0;

//! Set the OpenCascade geometrical description of this surface
Standard_EXPORT virtual  void SetCasSurf(const GeomAdaptor_Surface& theSurf)  = 0;

//! Return OpenCascade surface
Standard_EXPORT virtual  Handle_Geom_Surface CasSurf() const = 0;

//! Is equal to other surface? Regardless of orientation
Standard_EXPORT virtual  Standard_Boolean IsEqual(const Handle(McCadCSGGeom_Surface)& another) const = 0;

//! Is identical to other surface?
Standard_EXPORT virtual  Standard_Boolean IsGeomEqual(const Handle(McCadCSGGeom_Surface)& another) const = 0;

//! Set the Units which are used in the input model. <br>
//! Possible choices are McCadCSGGeom_MM, McCadCSGGeom_CM <br>
//! CAD systems usually use 'mm' while MC codes are based on 'cm' description of geometry
Standard_EXPORT virtual  void SetUnits(McCadCSGGeom_Unit theUnit) ;

//! Returns the defined units. See SetUnits()
Standard_EXPORT virtual McCadCSGGeom_Unit GetUnits() const ;

//! If input units are not McCadCSGGeom_CM, all surface description has to be scaled to cm
Standard_EXPORT virtual Standard_Real Scale() const;

//! Defines the Type of Monte Carlo Code the Print function should adress.
Standard_EXPORT virtual void SetMCType(const McCadCSGGeom_MCType& theMCType) ;

//! Returns the chosen Monte Carlo type - default is McCadCSGGeom_MCNP
Standard_EXPORT virtual McCadCSGGeom_MCType GetMCType() const ;

 // Type management
 //
 Standard_EXPORT const Handle(Standard_Type)& DynamicType() const;
 //Standard_EXPORT Standard_Boolean	       IsKind(const Handle(Standard_Type)&) const;

 //! Set the surface to a macrobody. <br>
 //! For MCNP input reader. Macrobodies have to be expanded to single surfaces.
 Standard_EXPORT virtual void SetIsMacroBody() ;


 //! Returns true, if surface is a macrobody
 Standard_EXPORT virtual Standard_Boolean IsMacroBody() ;

 //! Add the surface number of a newly generated surface for this macrobody. See SetIsMacrobody()
 Standard_EXPORT virtual void AddMacroBodySurface(const Standard_Integer& surfNum);

 //! Returns a list of all surfaces this macrobody consists of. See SetIsMacrobody()
 Standard_EXPORT virtual Handle(TColStd_HSequenceOfInteger) GetMacroBodySurfaces();

 //! Set a Sequence of surface numbers (int) as the surfaces the macrobody consists of.
 Standard_EXPORT virtual void SetMacroBodySurfaceNumbers(const Handle(TColStd_HSequenceOfInteger)& mbsn) ;

protected:

 // Methods PROTECTED
 //


//!  Defines the root class Surface for use in csg construction. <br>
//! <br>
Standard_EXPORT McCadCSGGeom_Surface();


 // Fields PROTECTED
 //
gp_Ax3 myTransformedAxis;
gp_Ax3 myAxis;
Standard_Integer myNumber;
Standard_Integer myTNumber;
McCadCSGGeom_SurfaceType myType;
gp_Trsf myTrsf;
Standard_Boolean haveTrsf;
McCadCSGGeom_Unit myUnit;
McCadCSGGeom_MCType myMCType;
Handle(TColStd_HSequenceOfInteger) myMacroBodySurfaceHSequence;
Standard_Boolean myIsMacroBody;
static const int myOutputPrecision=7;

private:

 // Methods PRIVATE
 //


 // Fields PRIVATE
 //


};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
