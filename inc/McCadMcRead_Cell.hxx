// File generated by CPPExt (Transient)
//
//
//                     Copyright (C) 1991 - 2000 by
//                      Matra Datavision SA.  All rights reserved.
//
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
//
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _McCadMcRead_Cell_HeaderFile
#define _McCadMcRead_Cell_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Handle_McCadMcRead_Cell_HeaderFile
#include <Handle_McCadMcRead_Cell.hxx>
#endif

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_McCadMcRead_Fill_HeaderFile
#include <Handle_McCadMcRead_Fill.hxx>
#endif
#ifndef _Handle_McCadMcRead_HSequenceOfFill_HeaderFile
#include <Handle_McCadMcRead_HSequenceOfFill.hxx>
#endif
#ifndef _Handle_TColgp_HSequenceOfPnt_HeaderFile
#include <Handle_TColgp_HSequenceOfPnt.hxx>
#endif
#ifndef _McCadMcRead_CellPtr_HeaderFile
#include <McCadMcRead_CellPtr.hxx>
#endif
#ifndef _Handle_TColStd_HSequenceOfInteger_HeaderFile
#include <Handle_TColStd_HSequenceOfInteger.hxx>
#endif
#ifndef _Handle_McCadMcRead_HSequenceOfCellPtr_HeaderFile
#include <Handle_McCadMcRead_HSequenceOfCellPtr.hxx>
#endif
#ifndef _Handle_TColStd_HSequenceOfAsciiString_HeaderFile
#include <Handle_TColStd_HSequenceOfAsciiString.hxx>
#endif
#ifndef _Handle_McCadCSGGeom_Transformation_HeaderFile
#include <Handle_McCadCSGGeom_Transformation.hxx>
#endif
#ifndef _McCadCSGGeom_Cell_HeaderFile
#include <McCadCSGGeom_Cell.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class McCadMcRead_Fill;
class McCadMcRead_HSequenceOfFill;
class TColgp_HSequenceOfPnt;
class TColStd_HSequenceOfInteger;
class McCadMcRead_HSequenceOfCellPtr;
class TColStd_HSequenceOfAsciiString;
class McCadCSGGeom_Transformation;

//! \brief Cell description of MCNP file how it's read

class McCadMcRead_Cell : public McCadCSGGeom_Cell {

public:
 // Methods PUBLIC
 //

//! Creates an MCNP Cell with MCNP syntax. <br>
//! <br>
//! <br>
Standard_EXPORT McCadMcRead_Cell();


Standard_EXPORT McCadMcRead_Cell(const Standard_Integer theCNum,const Standard_Integer theMNum,const Standard_Real theDensity);


Standard_EXPORT   void SetPseudo(const Standard_Boolean thePseudo) ;


Standard_EXPORT   Standard_Boolean IsPseudo() const;


Standard_EXPORT   void SetHaveTRCL(const Standard_Boolean theIndic) ;


Standard_EXPORT   Standard_Boolean IsTRCL() const;


Standard_EXPORT   void SetTRCLNumber(const Standard_Integer theCount) ;


Standard_EXPORT   Standard_Integer GetTRCLNumber() const;


Standard_EXPORT   void SetHaveLat(const Standard_Boolean theIndic) ;


Standard_EXPORT   void SetLat(const Standard_Integer theNum) ;


Standard_EXPORT   Standard_Integer GetLatNum() const;


Standard_EXPORT   Standard_Boolean IsLat() const;


Standard_EXPORT   void SetHaveLike(const Standard_Boolean theIndic) ;


Standard_EXPORT   Standard_Integer GetLikeNum() const;


Standard_EXPORT   McCadMcRead_CellPtr GetLikePtr() const;


Standard_EXPORT   void SetLikeNum(const Standard_Integer theIndex) ;


Standard_EXPORT   void SetLikePtr(const McCadMcRead_CellPtr& thePtr) ;


Standard_EXPORT   Standard_Boolean IsLike() const;


Standard_EXPORT   void SetHaveU(const Standard_Boolean theIn) ;


Standard_EXPORT   void SetUNum(const Standard_Integer theIndex) ;


Standard_EXPORT   Standard_Integer GetUNum() const;


Standard_EXPORT   void SetPseudoNum(const Standard_Integer theIndex) ;


Standard_EXPORT   Standard_Integer GetPseudoNum() const;


Standard_EXPORT   void SetCSG(const Handle(TColStd_HSequenceOfAsciiString)& theCSG, bool updatePostFixCSG=true) ;


Standard_EXPORT   Standard_Boolean IsU() const;


Standard_EXPORT   void SetHaveFill(const Standard_Boolean theIn) ;


Standard_EXPORT   void SetFill(const Handle(McCadMcRead_Fill)& theFiller) ;


Standard_EXPORT   Standard_Boolean IsFill() const;


Standard_EXPORT   void SetHaveMacro(const Standard_Boolean theIn) ;


Standard_EXPORT   Standard_Boolean HaveMacro() const;


Standard_EXPORT   void SetMacroIndex(const Handle(TColStd_HSequenceOfInteger)& theInSeq) ;


Standard_EXPORT   void SetMacroPtrs(const Handle(McCadMcRead_HSequenceOfCellPtr)& theInPtrSeq) ;


Standard_EXPORT   Handle_TColStd_HSequenceOfInteger GetMacroIndex() const;


Standard_EXPORT   Handle_McCadMcRead_HSequenceOfCellPtr GetMacroPtrs() const;


Standard_EXPORT   void SetInFixCSG(const Handle(TColStd_HSequenceOfAsciiString)& theCSG) ;


Standard_EXPORT   Handle_TColStd_HSequenceOfAsciiString GetInFixCSG() const;


Standard_EXPORT   void SetPostFixCSG(const Handle(TColStd_HSequenceOfAsciiString)& theCSG) ;


Standard_EXPORT   Handle_TColStd_HSequenceOfAsciiString GetPostFixCSG();


Standard_EXPORT   Handle_McCadMcRead_Fill GetFill() const;


Standard_EXPORT   Handle_McCadMcRead_HSequenceOfFill GetFillSeq() const;


Standard_EXPORT   void SetFillSeq(const Handle(McCadMcRead_HSequenceOfFill)& theFillerSeq) ;


Standard_EXPORT   Handle_TColgp_HSequenceOfPnt GetFillPlaceSeq() const;


Standard_EXPORT   void SetFillPlaceSeq(const Handle(TColgp_HSequenceOfPnt)& thePlaceSeq) ;


Standard_EXPORT   void SetTrsf(const Handle(McCadCSGGeom_Transformation)& theTrsf) ;


Standard_EXPORT   Handle_McCadCSGGeom_Transformation GetTrsf() const;




Standard_EXPORT   void SetInfiniteLattice();
Standard_EXPORT   Standard_Boolean IsInfiniteLattice();
Standard_EXPORT   void SetOuterCSG(Handle_TColStd_HSequenceOfAsciiString& csg);
Standard_EXPORT   Handle_TColStd_HSequenceOfAsciiString GetOuterCSG();
Standard_EXPORT   void SetLatFillBoundary(Handle_TColStd_HSequenceOfAsciiString& csg);
Standard_EXPORT   Handle_TColStd_HSequenceOfAsciiString GetLatFillBoundary();

 // Type management
 //
 Standard_EXPORT const Handle(Standard_Type)& DynamicType() const;
 //Standard_EXPORT Standard_Boolean	       IsKind(const Handle(Standard_Type)&) const;

protected:

 // Methods PROTECTED
 //


 // Fields PROTECTED
 //


private:

 // Methods PRIVATE
 //


 // Fields PRIVATE
 //
Standard_Boolean myIsPseudo;
Standard_Integer myTRCLNumber;
Standard_Boolean myHaveLat;
Standard_Boolean myHaveLike;
Standard_Boolean myHaveU;
Standard_Boolean myHaveFill;
Standard_Boolean myHaveTRCL;
Standard_Boolean myHaveMacro;
Standard_Integer myLat;
Standard_Integer myLike;
Standard_Integer myU;
Standard_Integer myPseudoNum;
Handle_McCadMcRead_Fill myFill;
Handle_McCadMcRead_HSequenceOfFill myFillSeq;
Handle_TColgp_HSequenceOfPnt myFillPlaceSeq;
Standard_Integer myLikeNum;
McCadMcRead_CellPtr myLikePtr;
Handle_TColStd_HSequenceOfInteger myCompsNum;
Handle_McCadMcRead_HSequenceOfCellPtr myCompPtrs;
Handle_TColStd_HSequenceOfAsciiString myInFixCSG;
Handle_TColStd_HSequenceOfAsciiString myPostFixCSG;
Handle_TColStd_HSequenceOfAsciiString myOuterCSG;
Handle_TColStd_HSequenceOfAsciiString myLatFillBoundary;
Handle_McCadCSGGeom_Transformation myTrsf;
Standard_Boolean myIsInfiniteLattice;
bool myCSGHasChanged;

};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
