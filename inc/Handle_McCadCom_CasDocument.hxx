// File generated by CPPExt (Transient)
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _Handle_McCadCom_CasDocument_HeaderFile
#define _Handle_McCadCom_CasDocument_HeaderFile

#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif
#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif

#ifndef _Handle_McCadCom_Document_HeaderFile
#include <Handle_McCadCom_Document.hxx>
#endif

class Standard_Transient;
class Handle_Standard_Type;
class Handle(McCadCom_Document);
class McCadCom_CasDocument;
Standard_EXPORT Handle_Standard_Type& STANDARD_TYPE(McCadCom_CasDocument);

class Handle(McCadCom_CasDocument) : public Handle(McCadCom_Document) {
  public:
    Handle(McCadCom_CasDocument)():Handle(McCadCom_Document)() {} 
    Handle(McCadCom_CasDocument)(const Handle(McCadCom_CasDocument)& aHandle) : Handle(McCadCom_Document)(aHandle) 
     {
     }

    Handle(McCadCom_CasDocument)(const McCadCom_CasDocument* anItem) : Handle(McCadCom_Document)((McCadCom_Document *)anItem) 
     {
     }

    Handle(McCadCom_CasDocument)& operator=(const Handle(McCadCom_CasDocument)& aHandle)
     {
      Assign(aHandle.Access());
      return *this;
     }

    Handle(McCadCom_CasDocument)& operator=(const McCadCom_CasDocument* anItem)
     {
      Assign((Standard_Transient *)anItem);
      return *this;
     }

    McCadCom_CasDocument* operator->() const
     {
      return (McCadCom_CasDocument *)ControlAccess();
     }

//   Standard_EXPORT ~Handle(McCadCom_CasDocument)();
 
   Standard_EXPORT static const Handle(McCadCom_CasDocument) DownCast(const Handle(Standard_Transient)& AnObject);
};
#endif
