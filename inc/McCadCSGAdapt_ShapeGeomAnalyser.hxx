// File generated by CPPExt (Value)
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _McCadCSGAdapt_ShapeGeomAnalyser_HeaderFile
#define _McCadCSGAdapt_ShapeGeomAnalyser_HeaderFile

#ifndef _TopoDS_Shape_HeaderFile
#include <TopoDS_Shape.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_OStream_HeaderFile
#include <Standard_OStream.hxx>
#endif
class TopoDS_Shape;


#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif


class McCadCSGAdapt_ShapeGeomAnalyser  {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 

//! geometric analysis of a shape <br>
Standard_EXPORT McCadCSGAdapt_ShapeGeomAnalyser();


Standard_EXPORT McCadCSGAdapt_ShapeGeomAnalyser(const TopoDS_Shape& theShape);


Standard_EXPORT   void SetShape(const TopoDS_Shape& theShape) ;


Standard_EXPORT   TopoDS_Shape GetShape() const;


Standard_EXPORT   void Init() ;


Standard_EXPORT   void PrintSurfaceInfo(Standard_OStream& theStream) ;


Standard_EXPORT   void PrintShapeInfo(Standard_OStream& theStream) const;


Standard_EXPORT   Standard_Boolean Convertibly() const;


Standard_EXPORT   Standard_Integer GetNbPlane() const;


Standard_EXPORT   Standard_Integer GetNbCylinder() const;


Standard_EXPORT   Standard_Integer GetNbCone() const;


Standard_EXPORT   Standard_Integer GetNbSphere() const;


Standard_EXPORT   Standard_Integer GetNbTorus() const;


Standard_EXPORT   Standard_Integer GetNbBezierSurface() const;


Standard_EXPORT   Standard_Integer GetNbBSplineSurface() const;


Standard_EXPORT   Standard_Integer GetNbSurfaceOfRevolution() const;


Standard_EXPORT   Standard_Integer GetNbSurfaceOfExtrusion() const;


Standard_EXPORT   Standard_Integer GetNbOffsetSurface() const;


Standard_EXPORT   Standard_Integer GetNbUnspecifiedSurf() const;


Standard_EXPORT   Standard_Integer GetNbLine() const;


Standard_EXPORT   Standard_Integer GetNbCircle() const;


Standard_EXPORT   Standard_Integer GetNbEllipse() const;


Standard_EXPORT   Standard_Integer GetNbHyperbola() const;


Standard_EXPORT   Standard_Integer GetNbParabola() const;


Standard_EXPORT   Standard_Integer GetNbBezierCurve() const;


Standard_EXPORT   Standard_Integer GetNbBSplineCurve() const;


Standard_EXPORT   Standard_Integer GetNbUnspecifiedCurves() const;


Standard_EXPORT   Standard_Boolean IsDone() const;





protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //
TopoDS_Shape myShape;
Standard_Boolean myConvertibly;
Standard_Boolean myIsDone;
Standard_Integer myNbPlane;
Standard_Integer myNbCylinder;
Standard_Integer myNbCone;
Standard_Integer myNbSphere;
Standard_Integer myNbTorus;
Standard_Integer myNbBezierSurface;
Standard_Integer myNbBSplineSurface;
Standard_Integer myNbSurfaceOfRevolution;
Standard_Integer myNbSurfaceOfExtrusion;
Standard_Integer myNbOffsetSurface;
Standard_Integer myNbUnspecifiedSurf;
Standard_Integer myNbLine;
Standard_Integer myNbCircle;
Standard_Integer myNbEllipse;
Standard_Integer myNbHyperbola;
Standard_Integer myNbParabola;
Standard_Integer myNbBezierCurve;
Standard_Integer myNbBSplineCurve;
Standard_Integer myNbUnspecifiedCurves;


};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
