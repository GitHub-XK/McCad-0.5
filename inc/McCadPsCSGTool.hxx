// File generated by CPPExt (Value)
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _McCadPsCSGTool_HeaderFile
#define _McCadPsCSGTool_HeaderFile

#ifndef _Handle_TopTools_HSequenceOfShape_HeaderFile
#include <Handle_TopTools_HSequenceOfShape.hxx>
#endif
#ifndef _Handle_TColgp_HSequenceOfPnt_HeaderFile
#include <Handle_TColgp_HSequenceOfPnt.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class TopTools_HSequenceOfShape;
class TopoDS_Face;
class TColgp_HSequenceOfPnt;
class TopoDS_Shape;
class gp_Pnt;
class McCadPsCSGTool_Converter;
class McCadPsCSGTool_Extender;
class McCadPsCSGTool_BEvaluater;
class McCadPsCSGTool_Voxelizer;


#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif


class McCadPsCSGTool  {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 

//! computes resultants using BBox method. <br>
//! <br>
Standard_EXPORT static  Handle_TopTools_HSequenceOfShape Resultants(const TopoDS_Face& theFace) ;

//! computes resultants using BBox method. <br>
//! <br>
Standard_EXPORT static  Handle_TopTools_HSequenceOfShape BoxResultants(const TopoDS_Face& theFace) ;

//! computes partial drivatives <br>
//!  temporary implementation only for conical surfaces!!!! <br>
Standard_EXPORT static  Handle_TopTools_HSequenceOfShape Partials(const TopoDS_Face& theFace) ;

//! returns non-redundant points from vertices and non-free nodes from <br>
//!        face triangulation. <br>
//!        used for sign computation; <br>
Standard_EXPORT static  Handle_TColgp_HSequenceOfPnt SamplePoints(const TopoDS_Shape& theShape) ;

//! returns non-redundant points from vertices and all points from face triangulation <br>
//!        used for sign computation; <br>
Standard_EXPORT static  Handle_TColgp_HSequenceOfPnt AllSamplePoints(const TopoDS_Shape& theShape) ;

//! returns non-redundant sample points computed around a face. <br>
//! The method used here is scale transformation. <br>
Standard_EXPORT static  Handle_TColgp_HSequenceOfPnt FaceSamplePoints(const TopoDS_Face& theFace,const gp_Pnt& thePnt,const Standard_Real theFact) ;

//! deletes redundant  faces from the sequence <br>
//! <br>
Standard_EXPORT static  Handle_TopTools_HSequenceOfShape DeleteRedLinFace(Handle(TopTools_HSequenceOfShape)& aFaceSeq) ;

//! deletes redundant  faces from the sequence <br>
//! <br>
Standard_EXPORT static  Handle_TopTools_HSequenceOfShape DeleteRedCylFace(Handle(TopTools_HSequenceOfShape)& aFaceSeq) ;

//! deletes redundant  faces from the sequence <br>
//! <br>
Standard_EXPORT static  Handle_TopTools_HSequenceOfShape DeleteRedConFace(Handle(TopTools_HSequenceOfShape)& aFaceSeq) ;

//! deletes redundant  faces from the sequence <br>
//! <br>
Standard_EXPORT static  Handle_TopTools_HSequenceOfShape DeleteRedSphFace(Handle(TopTools_HSequenceOfShape)& aFaceSeq) ;

//! deletes redundant  faces from the sequence <br>
//! <br>
Standard_EXPORT static  Handle_TopTools_HSequenceOfShape DeleteRedTorFace(Handle(TopTools_HSequenceOfShape)& aFaceSeq) ;





protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //

friend class McCadPsCSGTool_Converter;
friend class McCadPsCSGTool_Extender;
friend class McCadPsCSGTool_BEvaluater;
friend class McCadPsCSGTool_Voxelizer;

};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
