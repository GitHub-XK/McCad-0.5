// File generated by CPPExt (Value)
//
//                     Copyright (C) 1991 - 2000 by
//                      Matra Datavision SA.  All rights reserved.
//
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
//
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _McCadMcWrite_McInputGenerator_HeaderFile
#define _McCadMcWrite_McInputGenerator_HeaderFile

#ifndef _Handle_TColStd_HSequenceOfAsciiString_HeaderFile
#include <Handle_TColStd_HSequenceOfAsciiString.hxx>
#endif
#ifndef _Standard_OStream_HeaderFile
#include <Standard_OStream.hxx>
#endif
class TColStd_HSequenceOfAsciiString;
class TCollection_AsciiString;


#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

//! \brief Base class for MC input generators

//! This class is the base class for MC input generators. Every class to generate an MC <br>
//! output should inherit this class
class McCadMcWrite_McInputGenerator  {

public:

    void* operator new(size_t,void* anAddress)
      {
        return anAddress;
      }
    void* operator new(size_t size)
      {
        return Standard::Allocate(size);
      }
    void  operator delete(void *anAddress)
      {
        if (anAddress) Standard::Free((Standard_Address&)anAddress);
      }
 // Methods PUBLIC
 //



Standard_EXPORT virtual  void MakeHeader() const;


Standard_EXPORT virtual  void AddHeaderText(const TCollection_AsciiString& theText) ;


Standard_EXPORT virtual  void PrintHeader(Standard_OStream& theStream) ;


Standard_EXPORT virtual  void PrintAll(Standard_OStream& theStream) ;





protected:

 // Methods PROTECTED
 //

//! discrete face class <br>
//!  Face with points on it <br>
//! <br>
Standard_EXPORT McCadMcWrite_McInputGenerator();


 // Fields PROTECTED
 //
Handle_TColStd_HSequenceOfAsciiString myHeader;


private:

 // Methods PRIVATE
 //


 // Fields PRIVATE
 //


};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
