// File generated by CPPExt (Value)
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _McCadCSGTool_Cutter_HeaderFile
#define _McCadCSGTool_Cutter_HeaderFile

#ifndef _TopoDS_Solid_HeaderFile
#include <TopoDS_Solid.hxx>
#endif
#ifndef _Handle_TopTools_HSequenceOfShape_HeaderFile
#include <Handle_TopTools_HSequenceOfShape.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_McCadTDS_ExtFace_HeaderFile
#include <Handle_McCadTDS_ExtFace.hxx>
#endif
class TopTools_HSequenceOfShape;
class McCadTDS_ExtFace;
class TopoDS_Solid;


#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

//! \brief Performs a slicing operation of a solid with a planar face

//! This class generates a cut of a solid by a given face <br>
//!  and direction. <br>
class McCadCSGTool_Cutter  {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 

Standard_EXPORT McCadCSGTool_Cutter();


Standard_EXPORT McCadCSGTool_Cutter(const TopoDS_Shape& theSolid,const Handle(McCadTDS_ExtFace)& theExtFace);


Standard_EXPORT   void Init(const TopoDS_Shape& theSolid,const Handle(McCadTDS_ExtFace)& theExtFace) ;


Standard_EXPORT   Standard_Boolean IsDone() const;


Standard_EXPORT   void Done() ;


Standard_EXPORT   void NotDone() ;


Standard_EXPORT   Handle_TopTools_HSequenceOfShape Solids() const;


Standard_EXPORT   void SetLastCut(const Standard_Boolean isLast) ;


Standard_EXPORT   Standard_Boolean IsLastCut() const;





protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //
TopoDS_Shape mySolid;
Handle_TopTools_HSequenceOfShape myResultSolids;
Standard_Boolean myIsDone;
Handle_McCadTDS_ExtFace myExtFace;
TopoDS_Shape myPosPartSol;
TopoDS_Shape myNegPartSol;
Standard_Boolean myLastCut;


};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
