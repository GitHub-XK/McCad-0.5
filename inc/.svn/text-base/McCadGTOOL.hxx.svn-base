// File generated by CPPExt (Value)
//
//                     Copyright (C) 1991 - 2000 by
//                      Matra Datavision SA.  All rights reserved.
//
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
//
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _McCadGTOOL_HeaderFile
#define _McCadGTOOL_HeaderFile

#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class GeomAdaptor_Surface;
class gp_Pnt;
class gp_Pln;
class gp_Cone;
class gp_Cylinder;
class gp_Sphere;
class gp_Torus;
class TColStd_Array1OfReal;


#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

/*!
    \brief Static toolbox for the evaluation of surface equations for specified points in 3D space
*/


class McCadGTOOL  {

public:

    void* operator new(size_t,void* anAddress)
      {
        return anAddress;
      }
    void* operator new(size_t size)
      {
        return Standard::Allocate(size);
      }
    void  operator delete(void *anAddress)
      {
        if (anAddress) Standard::Free((Standard_Address&)anAddress);
      }
 // Methods PUBLIC
 //


//! Evaluate a surface -> Get surface type and call responsible method from below
Standard_EXPORT static  Standard_Real Evaluate(const GeomAdaptor_Surface& theSurf,const gp_Pnt& thePoint) ;

//! Extract parameters from the plane Pl and call PlaneEvaluate(,)
Standard_EXPORT static  Standard_Real Evaluate(const gp_Pln& Pl,const gp_Pnt& thePoint) ;

//! Extract parameters from the cone Co and call ConeEvaluate(,)
Standard_EXPORT static  Standard_Real Evaluate(const gp_Cone& Co,const gp_Pnt& thePoint) ;

//! Extract parameters from the cylinder Cy and call CylinderEvaluate(,)
Standard_EXPORT static  Standard_Real Evaluate(const gp_Cylinder& Cy,const gp_Pnt& thePoint) ;

//! Extract parameters from the sphere Sp and call SphereEvaluate(,)
Standard_EXPORT static  Standard_Real Evaluate(const gp_Sphere& Sp,const gp_Pnt& thePoint) ;

//! Extract parameters from the torus To and call TorusEvaluate(,)
Standard_EXPORT static  Standard_Real Evaluate(const gp_Torus& To,const gp_Pnt& thePoint) ;

//! Evaluate surface equation of the plane Pl for the 3D point thePoint
Standard_EXPORT static  Standard_Real PlaneEvaluate(const Standard_Real X,const Standard_Real Y,const Standard_Real Z,const Standard_Real A,const Standard_Real B,const Standard_Real C,const Standard_Real D) ;

//! Default: try to evaluate as a quaric surface
Standard_EXPORT static  Standard_Real QuadricEvaluate(const Standard_Real X,const Standard_Real Y,const Standard_Real Z,const Standard_Real A1,const Standard_Real A2,const Standard_Real A3,const Standard_Real B1,const Standard_Real B2,const Standard_Real B3,const Standard_Real C1,const Standard_Real C2,const Standard_Real C3,const Standard_Real D) ;

//! Evaluate surface equation of the cylinder Cy for the 3D point thePoint
Standard_EXPORT static  Standard_Real CylinderEvaluate(const Standard_Real X,const Standard_Real Y,const Standard_Real Z,const Standard_Real A1,const Standard_Real A2,const Standard_Real A3,const Standard_Real B1,const Standard_Real B2,const Standard_Real B3,const Standard_Real C1,const Standard_Real C2,const Standard_Real C3,const Standard_Real D) ;

//! Evaluate surface equation of the cone Co for the 3D point thePoint
Standard_EXPORT static  Standard_Real ConeEvaluate(const Standard_Real X,const Standard_Real Y,const Standard_Real Z,const Standard_Real A1,const Standard_Real A2,const Standard_Real A3,const Standard_Real B1,const Standard_Real B2,const Standard_Real B3,const Standard_Real C1,const Standard_Real C2,const Standard_Real C3,const Standard_Real D) ;

//! Evaluate surface equation of the sphere Sp for the 3D point thePoint
Standard_EXPORT static  Standard_Real SphereEvaluate(const Standard_Real X,const Standard_Real Y,const Standard_Real Z,const Standard_Real A1,const Standard_Real A2,const Standard_Real A3,const Standard_Real B1,const Standard_Real B2,const Standard_Real B3,const Standard_Real C1,const Standard_Real C2,const Standard_Real C3,const Standard_Real D) ;

//! Evaluate surface equation of the torus To for the 3D point thePoint
Standard_EXPORT static  Standard_Real TorusEvaluate(const Standard_Real X,const Standard_Real Y,const Standard_Real Z,const TColStd_Array1OfReal& Coef) ;


//Standard_EXPORT static  Standard_Real EvaluateSurfaceOfRevolution(const GeomAdaptor_Surface& theSurf, const gp_Pnt& thePnt);



protected:

 // Methods PROTECTED
 //


 // Fields PROTECTED
 //


private:

 // Methods PRIVATE
 //


 // Fields PRIVATE
 //


};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
