// File generated by CPPExt (Value)
//
//                     Copyright (C) 1991 - 2000 by
//                      Matra Datavision SA.  All rights reserved.
//
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
//
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _McCadCSGTool_CellBuilder_HeaderFile
#define _McCadCSGTool_CellBuilder_HeaderFile

#ifndef _Handle_McCadTDS_HSequenceOfExtSolid_HeaderFile
#include <Handle_McCadTDS_HSequenceOfExtSolid.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_McCadCSGGeom_Cell_HeaderFile
#include <Handle_McCadCSGGeom_Cell.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class McCadTDS_HSequenceOfExtSolid;
class McCadCSGGeom_Cell;


#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#include <TColStd_HArray1OfReal.hxx>
#include <TColgp_HSequenceOfPnt.hxx>
#include <TColStd_HArray2OfReal.hxx>
#include <TopoDS_Face.hxx>
#include <math_Matrix.hxx>
#include <math_Vector.hxx>
#include <McCadCSGGeom_Unit.hxx>

//! \brief builds a McCadCSGGeom_Cell from a McCadTDS_ExtSolid

//! This class builds cells from extended solids. <br>
//! <br>
class McCadCSGTool_CellBuilder  {

public:

    void* operator new(size_t,void* anAddress)
      {
        return anAddress;
      }
    void* operator new(size_t size)
      {
        return Standard::Allocate(size);
      }
    void  operator delete(void *anAddress)
      {
        if (anAddress) Standard::Free((Standard_Address&)anAddress);
      }
 // Methods PUBLIC
 //

Standard_EXPORT McCadCSGTool_CellBuilder();


Standard_EXPORT McCadCSGTool_CellBuilder(const Handle(McCadTDS_HSequenceOfExtSolid)& theExtSolidSeq);


Standard_EXPORT McCadCSGTool_CellBuilder(const Handle(McCadTDS_HSequenceOfExtSolid)& theExtSolidSeq,const Standard_Integer theMatNumber);

Standard_EXPORT McCadCSGTool_CellBuilder(const Handle(McCadTDS_HSequenceOfExtSolid)& theExtSolidSeq,const Standard_Integer theMatNumber, const Standard_Real
theDensity);


Standard_EXPORT   void Init(const Handle(McCadTDS_HSequenceOfExtSolid)& theExtSolidSeq) ;


Standard_EXPORT   void Init() ;


Standard_EXPORT   void SetMatNumber(const Standard_Integer theMatNumber) ;


Standard_EXPORT   void SetDensity(const Standard_Real theDensity);


Standard_EXPORT   Standard_Boolean IsDone() const;


Standard_EXPORT   void Done() ;


Standard_EXPORT   void NotDone() ;


Standard_EXPORT   Handle_McCadCSGGeom_Cell GetCell() const;


Standard_EXPORT   Standard_Integer NbExtSolids() const;


Standard_EXPORT   Standard_Integer NbFaces() const;


Standard_EXPORT   Standard_Boolean IsSimpleSolid() const;


Standard_EXPORT   void SetUnits(McCadCSGGeom_Unit theUnit) ;


Standard_EXPORT   McCadCSGGeom_Unit GetUnits() const ;


Standard_EXPORT   void MakeOuterVoid(Standard_Boolean state) ;


protected:

 // Methods PROTECTED
 //


 // Fields PROTECTED
 //


private:

 // Methods PRIVATE
 //
Standard_EXPORT   Standard_Boolean ComputeGQ(const TopoDS_Face& theFace, math_Vector& pVec);
Standard_EXPORT   Standard_Real DjFunc(const gp_Pnt& pnt, const Standard_Integer& indx);
 // Fields PRIVATE
 //
Handle_McCadTDS_HSequenceOfExtSolid myExtSolidSeq;
Standard_Integer myMatNumber;
Handle_McCadCSGGeom_Cell myCell;
Standard_Boolean myIsDone;
Standard_Real myDensity;
Standard_Boolean myIsVoid;
McCadCSGGeom_Unit myUnits;
Standard_Boolean myMakeOuterVoid;

};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
