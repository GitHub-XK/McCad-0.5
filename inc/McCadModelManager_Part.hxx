// File generated by CPPExt (Value)
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _McCadModelManager_Part_HeaderFile
#define _McCadModelManager_Part_HeaderFile

#ifndef _Quantity_NameOfColor_HeaderFile
#include <Quantity_NameOfColor.hxx>
#endif
#ifndef _Graphic3d_NameOfMaterial_HeaderFile
#include <Graphic3d_NameOfMaterial.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _McCadModelManager_ShapePtr_HeaderFile
#include <McCadModelManager_ShapePtr.hxx>
#endif


#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif


class McCadModelManager_Part  {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 


Standard_EXPORT McCadModelManager_Part(const Standard_Integer aCID = -1,const Quantity_NameOfColor aColor = Quantity_NOC_ORANGE,const Graphic3d_NameOfMaterial aMaterial = Graphic3d_NOM_PLASTIC);


Standard_EXPORT   McCadModelManager_ShapePtr Shape() const;


Standard_EXPORT   Standard_Boolean IsTransparent() const;


Standard_EXPORT   Standard_Integer Transparency() const;


Standard_EXPORT   Quantity_NameOfColor Color() const;


Standard_EXPORT   Standard_Integer ID() const;


Standard_EXPORT   Graphic3d_NameOfMaterial Material() const;


Standard_EXPORT   Standard_Boolean Visible() const;


Standard_EXPORT   Standard_Integer ParentComponent() const;


Standard_EXPORT   void SetTransparency(const Standard_Integer theTransparency) ;


Standard_EXPORT   void SetColor(const Quantity_NameOfColor theColor) ;


Standard_EXPORT   void SetMaterial(const Graphic3d_NameOfMaterial theMaterial) ;


Standard_EXPORT   void SetShape(const McCadModelManager_ShapePtr& theShape) ;


Standard_EXPORT   void SetVisible(const Standard_Boolean Visible) ;


Standard_EXPORT   void SetParentComponent(const Standard_Integer theCID) ;


Standard_EXPORT   void SetID(const Standard_Integer theID) ;





protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //
Quantity_NameOfColor myOCCColor;
Graphic3d_NameOfMaterial myOCCMaterial;
Standard_Integer myOCCTransparency;
Standard_Boolean myHaveTransparency;
McCadModelManager_ShapePtr myShape;
Standard_Boolean myIsVisible;
Standard_Integer myParentComponent;
Standard_Integer myID;


};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
